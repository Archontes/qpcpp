##############################################################################
# Product: Makefile for QP application, Vanilla, GNU-AVR
# Last Updated for Version: 4.3.00
# Date of the Last Update:  Dec 16, 2011
#
#                    Q u a n t u m     L e a P s
#                    ---------------------------
#                    innovating embedded systems
#
# Copyright (C) 2002-2011 Quantum Leaps, LLC. All rights reserved.
#
# This software may be distributed and modified under the terms of the GNU
# General Public License version 2 (GPL) as published by the Free Software
# Foundation and appearing in the file GPL.TXT included in the packaging of
# this file. Please note that GPL Section 2[b] requires that all works based
# on this software must also be made publicly available under the terms of
# the GPL ("Copyleft").
#
# Alternatively, this software may be distributed and modified under the
# terms of Quantum Leaps commercial licenses, which expressly supersede
# the GPL and are specifically designed for licensees interested in
# retaining the proprietary status of their code.
#
# Contact information:
# Quantum Leaps Web site:  http://www.quantum-leaps.com
# e-mail:                  info@quantum-leaps.com
##############################################################################

# build configuration
CONF = spy

#-----------------------------------------------------------------------------
# NOTE: the Makefile expects that the QPCPP environment variable is defined
# and points to the QP/C++ installation directory
#
ifndef QPCPP
$(error The QPCPP environment variable must be defined)
endif

#-----------------------------------------------------------------------------
# general utilities
#
RM = del

#-----------------------------------------------------------------------------
# tools
#
ifeq ($(GNU_AVR),)
GNU_AVR = C:/tools/Atmel/AVR_Studio_5.0/AVR Toolchain
endif

CC    := "$(GNU_AVR)\bin\avr-g++"
CPP   := "$(GNU_AVR)\bin\avr-gcc"
AS    := "$(GNU_AVR)\bin\avr-as"
LINK  := "$(GNU_AVR)\bin\avr-g++"                   # for C++ programs
BIN   := "$(GNU_AVR)/bin\avr-objcopy"
RM    := rm -rf
MKDIR := mkdir

#-----------------------------------------------------------------------------
# directories
#
QP_PORT_DIR := $(QPCPP)/ports/avr/vanilla/gnu
APP_DIR     := .
LIB_DIR     :=

# source directories
VPATH = $(APP_DIR) \
	$(QPCPP)/source

# Output file basename
OUTPUT    := dpp-stk600-atmega2560

# include directories
INCLUDES  = -I$(QPCPP)/include	\
	-I$(QP_PORT_DIR) \
	-I.

# defines
DEFINES =

#-----------------------------------------------------------------------------
# files
#

# assembler source files
ASM_SRCS :=

# C source files
C_SRCS := $(wildcard *.c)

# C++ source files
CPP_SRCS := $(wildcard *.cpp)

#-----------------------------------------------------------------------------
# build options for various configurations
#

TARGET_MCU = atmega2560

ifeq (rel, $(CONF))       # Release configuration ............................

BIN_DIR := Release
LIBS    := -lqp_$(TARGET_MCU)

ASFLAGS = -g -mmcu=$(TARGET_MCU)

CFLAGS = =-c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -Wall $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -fno-threadsafe-statics -Wall \
	$(INCLUDES) $(DEFINES) -DNDEBUG

LINKFLAGS = -Wl,-L$(QP_PORT_DIR)/$(BIN_DIR) -mmcu=atmega2560 \
	-Wl,-Map=$(BIN_DIR)/$(OUTPUT).map

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := Spy
LIBS    := -lqp_$(TARGET_MCU)

ASFLAGS = -g -mmcu=$(TARGET_MCU)

CFLAGS = =-c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -Wall $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -fno-threadsafe-statics -Wall \
	$(INCLUDES) $(DEFINES) -DQ_SPY

LINKFLAGS = -Wl,-L$(QP_PORT_DIR)/$(BIN_DIR) -mmcu=atmega2560 \
	-Wl,-Map=$(BIN_DIR)/$(OUTPUT).map

else                     # default Debug configuration .......................

BIN_DIR := Debug
LIBS    := -lqp_$(TARGET_MCU)

ASFLAGS = -g -mmcu=$(TARGET_MCU)

CFLAGS = =-c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -Wall $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g3 -O1 -fdata-sections -ffunction-sections -fshort-enums \
	-mmcu=$(TARGET_MCU) -fno-threadsafe-statics -Wall $(INCLUDES) $(DEFINES)

LINKFLAGS = -Wl,-L$(QP_PORT_DIR)/$(BIN_DIR) -mmcu=atmega2560 \
	-Wl,-Map=$(BIN_DIR)/$(OUTPUT).map

endif


ASM_OBJS     := $(patsubst %.s,%.o,$(ASM_SRCS))
C_OBJS       := $(patsubst %.c,%.o,$(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o,$(CPP_SRCS))

TARGET_BIN   := $(BIN_DIR)/$(OUTPUT).bin
TARGET_ELF   := $(OUTPUT).elf
ASM_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(ASM_OBJS))
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o, %.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o, %.d, $(CPP_OBJS_EXT))


#-----------------------------------------------------------------------------
# rules
#

all: $(BIN_DIR) $(TARGET_ELF)
#all: $(BIN_DIR) $(TARGET_BIN)

$(BIN_DIR):
	@echo
	mkdir -p $@

$(TARGET_BIN): $(TARGET_ELF)
	$(BIN) -O binary $< $@

$(TARGET_ELF) : $(ASM_OBJS_EXT) $(C_OBJS_EXT) $(CPP_OBJS_EXT)
	$(LINK) $(LINKFLAGS) -o $@ $^ $(LIBS)

$(BIN_DIR)/%.d : %.c
	$(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $< > $@

$(BIN_DIR)/%.d : %.cpp
	$(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $< > $@

$(BIN_DIR)/%.o : %.s
	$(AS) $(ASFLAGS) $< -o $@

$(BIN_DIR)/%.o : %.c
	$(CC) $(CFLAGS) -c $< -o $@

$(BIN_DIR)/%.o : %.cpp
	$(CPP) $(CPPFLAGS) -c $< -o $@

-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)


.PHONY : clean
clean:
	-$(RM) $(BIN_DIR)/*.o \
	$(BIN_DIR)/*.d \
	$(BIN_DIR)/*.bin \
	$(BIN_DIR)/*.elf \
	$(BIN_DIR)/*.map
	
show:
	@echo CONF = $(CONF)
	@echo ASM_SRCS = $(ASM_SRCS)
	@echo C_SRCS = $(C_SRCS)
	@echo CPP_SRCS = $(CPP_SRCS)
	@echo ASM_OBJS_EXT = $(ASM_OBJS_EXT)
	@echo C_OBJS_EXT = $(C_OBJS_EXT)
	@echo C_DEPS_EXT = $(C_DEPS_EXT)
	@echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
	@echo TARGET_ELF = $(TARGET_ELF)
