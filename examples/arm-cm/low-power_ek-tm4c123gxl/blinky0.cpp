//$file${.::blinky0.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: low-power.qm
// File:  ${.::blinky0.cpp}
//
// This code has been generated by QM 4.4.0 (https://www.state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//$endhead${.::blinky0.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.h"
#include "low_power.h"
#include "bsp.h"

//Q_DEFINE_THIS_FILE

//$declare${AOs::Blinky0} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//${AOs::Blinky0} ............................................................
class Blinky0 : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt0;

public:
    static Blinky0 instance;

private:
    uint8_t m_count;

public:
    Blinky0();

protected:
    static QP::QState initial(Blinky0 * const me, QP::QEvt const * const e);
    static QP::QState active(Blinky0 * const me, QP::QEvt const * const e);
    static QP::QState on(Blinky0 * const me, QP::QEvt const * const e);
    static QP::QState off(Blinky0 * const me, QP::QEvt const * const e);
    static QP::QState inactive(Blinky0 * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::Blinky0} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 640U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.4.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::AO_Blinky0} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//${AOs::AO_Blinky0} .........................................................
QP::QActive * const AO_Blinky0 = &Blinky0::instance;
//$enddef${AOs::AO_Blinky0} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::Blinky0} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//${AOs::Blinky0} ............................................................
Blinky0 Blinky0::instance;
//${AOs::Blinky0::Blinky0} ...................................................
Blinky0::Blinky0()
: QActive(Q_STATE_CAST(&initial)),
  m_timeEvt0(this, TIMEOUT0_SIG, 0U)
{}

//${AOs::Blinky0::SM} ........................................................
QP::QState Blinky0::initial(Blinky0 * const me, QP::QEvt const * const e) {
    //${AOs::Blinky0::SM::initial}
    (void)e; // unused parameter
    me->subscribe(BTN_PRESSED_SIG);

    QS_FUN_DICTIONARY(&active);
    QS_FUN_DICTIONARY(&on);
    QS_FUN_DICTIONARY(&off);
    QS_FUN_DICTIONARY(&inactive);

    return Q_TRAN(&active);
}
//${AOs::Blinky0::SM::active} ................................................
QP::QState Blinky0::active(Blinky0 * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky0::SM::active}
        case Q_ENTRY_SIG: {
            BSP_tickRate0_on();
            me->m_count = 4U;
            me->m_timeEvt0.armX(2U, 2U);
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky0::SM::active}
        case Q_EXIT_SIG: {
            me->m_timeEvt0.disarm();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky0::SM::active::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&on);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::Blinky0::SM::active::on} ............................................
QP::QState Blinky0::on(Blinky0 * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky0::SM::active::on}
        case Q_ENTRY_SIG: {
            BSP_led0_on();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky0::SM::active::on}
        case Q_EXIT_SIG: {
            BSP_led0_off();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky0::SM::active::on::TIMEOUT0}
        case TIMEOUT0_SIG: {
            --me->m_count;
            //${AOs::Blinky0::SM::active::on::TIMEOUT0::[me->m_count>0]}
            if (me->m_count > 0) {
                status_ = Q_TRAN(&off);
            }
            //${AOs::Blinky0::SM::active::on::TIMEOUT0::[else]}
            else {
                status_ = Q_TRAN(&inactive);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&active);
            break;
        }
    }
    return status_;
}
//${AOs::Blinky0::SM::active::off} ...........................................
QP::QState Blinky0::off(Blinky0 * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky0::SM::active::off::TIMEOUT0}
        case TIMEOUT0_SIG: {
            status_ = Q_TRAN(&on);
            break;
        }
        default: {
            status_ = Q_SUPER(&active);
            break;
        }
    }
    return status_;
}
//${AOs::Blinky0::SM::inactive} ..............................................
QP::QState Blinky0::inactive(Blinky0 * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky0::SM::inactive::BTN_PRESSED}
        case BTN_PRESSED_SIG: {
            status_ = Q_TRAN(&active);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Blinky0} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
